const axios = require('axios');

module.exports.config = {
  name: "result",
  version: "1.0.0",
  hasPermission: 0,
  credits: "Shaon Ahmed",
  description: "Check SSC/HSC/JSC results from Education Board API",
  commandCategory: "utility",
  usages: "[Type: result ‚Üí follow steps]",
  cooldowns: 5
};

module.exports.run = async function({ api, event }) {
  try {
    const res = await axios.get("https://shaon-ssc-result.vercel.app/options");
    const exams = res.data.examinations;

    let msg = "üìö Select Exam:\n";
    exams.forEach((exam, i) => {
      msg += `${i + 1}. ${exam.name}\n`;
    });

    return api.sendMessage(msg, event.threadID, (err, info) => {
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: event.senderID,
        type: "exam",
        exams
      });
    }, event.messageID);
  } catch {
    return api.sendMessage("‚ùå Failed to fetch exam list.", event.threadID);
  }
};

module.exports.handleReply = async function({ api, event, handleReply }) {
  const { author, type } = handleReply;
  if (event.senderID !== author) return;

  try {
    switch (type) {
      case "exam": {
        const selected = parseInt(event.body) - 1;
        if (isNaN(selected) || selected < 0 || selected >= handleReply.exams.length)
          return api.sendMessage("‚ùå Invalid exam selection.", event.threadID);

        const exam = handleReply.exams[selected];
        const res = await axios.get("https://shaon-ssc-result.vercel.app/options");
        const boards = res.data.boards;

        let msg = "üè´ Select Board:\n";
        boards.forEach((b, i) => {
          msg += `${i + 1}. ${b.name}\n`;
        });

        api.unsendMessage(handleReply.messageID);
        return api.sendMessage(msg, event.threadID, (err, info) => {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author,
            type: "board",
            boards,
            exam: exam.value
          });
        });
      }

      case "board": {
        const selected = parseInt(event.body) - 1;
        if (isNaN(selected) || selected < 0 || selected >= handleReply.boards.length)
          return api.sendMessage("‚ùå Invalid board selection.", event.threadID);

        const board = handleReply.boards[selected];
        api.unsendMessage(handleReply.messageID);
        return api.sendMessage("üìÖ Enter Exam Year (e.g. 2024):", event.threadID, (err, info) => {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author,
            type: "year",
            exam: handleReply.exam,
            board: board.value
          });
        });
      }

      case "year": {
        const year = event.body.trim();
        if (!/^(20[0-9]{2})$/.test(year))
          return api.sendMessage("‚ùå Invalid year.", event.threadID);

        api.unsendMessage(handleReply.messageID);
        return api.sendMessage("üßæ Enter Roll Number:", event.threadID, (err, info) => {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author,
            type: "roll",
            exam: handleReply.exam,
            board: handleReply.board,
            year
          });
        });
      }

      case "roll": {
        const roll = event.body.trim();
        if (!/^[0-9]{3,10}$/.test(roll))
          return api.sendMessage("‚ùå Invalid roll number.", event.threadID);

        api.unsendMessage(handleReply.messageID);
        return api.sendMessage("üìù Enter Registration Number:", event.threadID, (err, info) => {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author,
            type: "reg",
            exam: handleReply.exam,
            board: handleReply.board,
            year: handleReply.year,
            roll
          });
        });
      }

      case "reg": {
        const reg = event.body.trim();
        if (!/^[0-9]{3,15}$/.test(reg))
          return api.sendMessage("‚ùå Invalid registration number.", event.threadID);

        const { exam, board, year, roll } = handleReply;
        const url = `https://shaon-ssc-result.vercel.app/result?exam=${exam}&board=${board}&year=${year}&roll=${roll}&reg=${reg}`;

        api.unsendMessage(handleReply.messageID);

        try {
          const res = await axios.get(url);
          const data = res.data;

          if (!data.student) return api.sendMessage("‚ùå No result found.", event.threadID);

          const student = data.student;
          const grades = data.grades || [];

          let msg = "üéì ùó¶ùòÅùòÇùó±ùó≤ùóªùòÅ ùóúùóªùó≥ùóº:\n";
          for (const [key, value] of Object.entries(student)) {
            msg += `${key}: ${value}\n`;
          }

          msg += "\nüìñ ùóöùóøùóÆùó±ùó≤ ùó¶ùóµùó≤ùó≤ùòÅ:\n";
          grades.forEach(g => {
            msg += `${g.subject} (${g.code}): ${g.grade}\n`;
          });

          return api.sendMessage(msg, event.threadID);
        } catch {
          return api.sendMessage("‚ùå Error fetching result.", event.threadID);
        }
      }
    }
  } catch (err) {
    return api.sendMessage("‚ùå Something went wrong.", event.threadID);
  }
};
