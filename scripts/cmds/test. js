const axios = require('axios');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const YTDL_PRIMARY_API = 'https://sus-apis.onrender.com/api/ytdlv3';
const YTDL_FALLBACK_API = 'http://localhost:4000/api/ytdl-v4';

module.exports = {
  name: "ytdl",
  description: "Download a YouTube video and send it to the user 📹",
  usage: "!ytdl <YouTube URL>",
  cooldown: 10,
  adminOnly: false,

  /**
   * 
   * @param {object} botApi - বটের API অবজেক্ট, যেটা মেসেজ পাঠানো, রিসিভ করার ফাংশন রাখে
   * @param {object} event - ইভেন্ট অবজেক্ট, যেখানে মেসেজ, ইউজার, চ্যানেল/থ্রেড আইডি থাকে
   * @param {array} args - কমান্ডের আর্গুমেন্টস (যেমন ইউটিউব ভিডিও URL)
   */
  async execute(botApi, event, args) {
    const threadID = event.threadID || event.chatID || event.channelID;
    const messageID = event.messageID || event.id;
    const senderID = event.senderID || event.author;

    let filePath;
    let progressMsgID = null;

    try {
      if (!args[0]) {
        return botApi.sendMessage(`❌ Please provide a YouTube video URL.\nUsage: ${this.usage}`, threadID, messageID);
      }

      const videoUrl = args[0].trim();
      if (!videoUrl.startsWith('https://') || (!videoUrl.includes('youtube.com') && !videoUrl.includes('youtu.be'))) {
        return botApi.sendMessage(`❌ Please provide a valid YouTube video URL.`, threadID, messageID);
      }

      // Send searching message
      progressMsgID = await botApi.sendMessage(`🔍 Searching for video...`, threadID);

      // Try primary API
      let videoDownloadUrl, videoTitle;
      try {
        const apiUrl = `${YTDL_PRIMARY_API}?url=${encodeURIComponent(videoUrl)}&format=mp4`;
        const primaryResponse = await axios.get(apiUrl, { timeout: 20000 });

        if (primaryResponse.data && primaryResponse.data.success && primaryResponse.data.data && primaryResponse.data.data.downloadUrl) {
          videoDownloadUrl = primaryResponse.data.data.downloadUrl;
          videoTitle = primaryResponse.data.data.title || "YouTube Video";
        } else {
          throw new Error("Primary API did not return a valid MP4 URL");
        }
      } catch (err) {
        // Fallback API
        const fallbackApiUrl = `${YTDL_FALLBACK_API}?url=${encodeURIComponent(videoUrl)}&format=mp4`;
        const fallbackResponse = await axios.get(fallbackApiUrl, { timeout: 20000 });

        if (fallbackResponse.data && fallbackResponse.data.success && fallbackResponse.data.downloadUrl) {
          videoDownloadUrl = fallbackResponse.data.downloadUrl;
          videoTitle = fallbackResponse.data.title || "YouTube Video";
        } else {
          throw new Error("Fallback API did not return a valid MP4 URL");
        }
      }

      // Edit progress message
      if (progressMsgID) {
        await botApi.editMessage && botApi.editMessage(`📥 Downloading video...`, progressMsgID, threadID);
      }

      // Prepare temp file path
      const tempDir = path.join(__dirname, '..', 'temp');
      if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });
      const fileName = `ytdl_${crypto.randomBytes(8).toString('hex')}.mp4`;
      filePath = path.join(tempDir, fileName);

      // Download video stream
      const videoResponse = await axios.get(videoDownloadUrl, {
        responseType: 'stream',
        timeout: 60000
      });

      const contentType = videoResponse.headers['content-type'];
      if (!contentType || (!contentType.startsWith('video/') && contentType !== 'application/octet-stream')) {
        throw new Error(`Unexpected Content-Type: ${contentType}`);
      }

      const writer = fs.createWriteStream(filePath);
      videoResponse.data.pipe(writer);

      await new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
      });

      const stats = fs.statSync(filePath);
      if (stats.size === 0) throw new Error("Downloaded video file is empty");

      // Edit progress message again
