const axios = require("axios");
const fs = require("fs");
const path = require("path");
const { createCanvas, loadImage } = require("canvas");
const crypto = require("crypto");

module.exports = {
  config: {
    name: "pfpeffect",
    aliases: ["circlepfp", "roundpfp"],
    version: "1.0",
    role: 0,
    author: "Perplexity AI",
    description: "ðŸŽ¨ Make your profile picture round with a soft shadow effect!",
    category: "media",
    countDown: 5,
    guide: "Use {pn}pfpeffect [@mention]",
  },

  onStart: async function ({ event, message, usersData, api, args }) {
    const uid1 = event.senderID;
    const uid2 = Object.keys(event.mentions)[0];
    let uid = uid2 || uid1;

    // Get avatar URL
    const avatarUrl = await usersData.getAvatarUrl(uid);

    // Download avatar
    const avatarImg = await loadImage(avatarUrl);

    // Canvas setup
    const size = 512;
    const canvas = createCanvas(size, size);
    const ctx = canvas.getContext("2d");

    // Draw soft shadow
    ctx.save();
    ctx.shadowColor = "rgba(0,0,0,0.35)";
    ctx.shadowBlur = 32;
    ctx.beginPath();
    ctx.arc(size / 2, size / 2, size / 2 - 12, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.fillStyle = "#fff";
    ctx.fill();
    ctx.restore();

    // Draw circular avatar
    ctx.save();
    ctx.beginPath();
    ctx.arc(size / 2, size / 2, size / 2 - 16, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.clip();
    ctx.drawImage(avatarImg, 0, 0, size, size);
    ctx.restore();

    // Optional: Draw white border
    ctx.beginPath();
    ctx.arc(size / 2, size / 2, size / 2 - 16, 0, Math.PI * 2, true);
    ctx.lineWidth = 12;
    ctx.strokeStyle = "#fff";
    ctx.stroke();

    // Save temp file
    const tempDir = path.join(__dirname, "..", "..", "temp");
    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });
    const fileName = `pfpeffect_${crypto.randomBytes(8).toString("hex")}.png`;
    const tempFile = path.join(tempDir, fileName);

    const out = fs.createWriteStream(tempFile);
    const stream = canvas.createPNGStream();
    stream.pipe(out);

    await new Promise((resolve, reject) => {
      out.on("finish", resolve);
      out.on("error", reject);
    });

    // Send with mention (like your spy command)
    const userInfo = await api.getUserInfo(uid);
    message.reply({
      body: `âœ¨ Here is the round profile picture for @${userInfo[uid].name}`,
      attachment: fs.createReadStream(tempFile),
      mentions: [{
        tag: `@${userInfo[uid].name}`,
        id: uid,
      }]
    });

    // Clean up
    fs.unlinkSync(tempFile);
  },
};
